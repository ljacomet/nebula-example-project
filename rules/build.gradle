plugins {
    id 'java-library'
    id 'maven-publish'
}

group = 'example.nebula'
version = '1.0.4'

dependencies {
    constraints {
        api('sustitutionrule:substitute') {
            version {
                prefer '1.0.1'
                reject '1.0.0'
            }
            because ('1.0.0 was accidentally released from dev branch')
        }
        api('sustitutionrule:directsubstitute') {
            version {
                prefer '2.1.0'
                reject '2.0.0'
            }
            because ('2.0.0 was accidentally released from dev branch')
        }
        api('sustitutionrule:rangesubstitute') {
            version {
                prefer '2.5.1' // This prefer will end up upgrading any dependency, including ones on 1.x.y
                // An alternative is to omit the prefer above. But then target builds can be broken without its addition locally.
                reject '[2.0.0,2.5.0]'
            }
            because ('range contains a bug')
        }
        api('rejectrule:reject') {
            version {
                // The reject is the right way, but it is currently busted
//                reject '1.0.1'
                prefer '1.0.0' // And here again, that's not enough to not pick latest
            }
        }

    }
}

publishing {
    publications {
        rules(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            name 'example'
            url '../repository/maven'
        }
    }
}